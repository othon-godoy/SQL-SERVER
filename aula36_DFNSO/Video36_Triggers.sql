-- TRIGGERS
-----------------------------------------

USE CURSO_SQL2014_IMPL
GO


-- TRIGGERS ARE JUST LIKE STORED PROCEDURES CALLED WHEN A SPECIFIC ACTION OCCURS
-- YOU USE THEM TO IMPLELEMENT COMPLEX BUSSINESS LOGIC, AUDIT OR VALIDATION
-- NOTE: ALWAYS TRY TO USE CONSTRAINTS INSTEAD OF TRIGGERS

-- THEARE ARE TRIGGERS TO HANDLE DATA AND SERVER EVENTS
-- WE ARE GOING TO FOCUS ON DATA TRIGGERS

-- TRIGGERS ARE LINKED TO TABLES/VIEWS AND HAVE THE FOLLOWING CHARACTERISTICS:
	--> START ACTIONS: INSERT, UPDATE OR DELETE
	--> MOMENT: FOR/AFTER/INSTEADOF
	--> OTHER OPTIONS (EXECUTE AS, ENCRIPTATION, ETC)

-- INSIDE A TRIGGER YOU CAN CREATE ANY TYPE OF VALID T-SQL CODE
-- THERE ARE FUNCTIONS AND TEMPORARY TABLES THAT GIVES YOU CONTEXT
-- TRIGGERS CAN CANCEL THE ACTIONS THAT STARTED THEM (ROLLBACK THE TRANSACTION)

-- YOU CAN HAVE RECURSIVE TRIGGERS, BUT IT IS BEST TO AVOID THOSE

-- YOU HAVE THE CREATE/ALTER/DROP DDL SYNTAX TO WORK WITH TRIGGERS

-- LETS SEE SOME SIMPLE EXAMPLES:

CREATE TABLE TB_TEST_TRIGGER
(
	ID_TEST INT,
	NAME_TEST VARCHAR(100)
)

SELECT * FROM TB_TEST_TRIGGER

INSERT TB_TEST_TRIGGER VALUES(1,'ABC')
INSERT TB_TEST_TRIGGER VALUES(2,'DEF')

-- THE FIRST TRIGGER THAT ACCESS THE INSERTED TEMPORARY TABLE
CREATE TRIGGER T_INSERT 
ON TB_TEST_TRIGGER 
FOR INSERT
AS
BEGIN
	SELECT * FROM INSERTED
END


-- YOU CAN HAVE MORE THAN ONE TRIGGER FOR THE SAME ACTION
CREATE TRIGGER T_INSERT_OUTRO
ON TB_TEST_TRIGGER
FOR INSERT
AS
BEGIN
	SELECT * FROM INSERTED
	SELECT 'SECOND TRIGGER'
END

-- UPDATE TRIGGERS HAVE THE INSERTED AND DELETED TABLES
CREATE TRIGGER T_UPDATE_TEST
ON TB_TEST_TRIGGER
FOR UPDATE 
AS
BEGIN
	SELECT * FROM DELETED
	SELECT * FROM INSERTED
	ROLLBACK TRANSACTION
END

INSERT TB_TEST_TRIGGER VALUES(3,'FFF')

INSERT TB_TEST_TRIGGER VALUES(4,'FFF')

SELECT * FROM TB_TEST_TRIGGER

UPDATE TB_TEST_TRIGGER SET ID_TEST = 2


-- YOU CAN DISABLE AND ENABLE TRIGGERS
ALTER TABLE TB_TEST_TRIGGER 
DISABLE TRIGGER T_UPDATE_TEST 

SP_HELPTEXT T_UPDATE_TEST
SP_HELPTRIGGER TB_TEST_TRIGGER


-- TRIGGERS CAN BE LINKED TO DDL COMMANDS. EXAMPLE:


CREATE TRIGGER CREATE_MONITOR
ON DATABASE
FOR CREATE_PROCEDURE
AS
BEGIN
	SELECT EVENTDATA()
END

CREATE PROCEDURE ST_TEST
AS
BEGIN
	SELECT GETDATE()
END

