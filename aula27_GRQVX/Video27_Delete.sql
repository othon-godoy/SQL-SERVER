-- DELETING DATA
----------------------------------------

USE CURSO_SQL2014_IMPL
GO

-- THE MOST DANGEROUS OPERATION IN A DATABASE IS DATA REMOVAL
-- BEFORE YOU BEGIN MAKE SURE YOU ARE IN THE CORRECT PLACE (DEVELOPMENT/PRODUCTION DATABASE)
-- AND BE CAREFULL

-- THE BASIC COMMAND TO REMOVE ROWS IN SQL SERVER IS THE DELETE COMMAND
-- NO MATTER WHAT YOU USE IT, A DELETE IS ALL THAT SQL SERVER UNDERSTAND

-- BASIC SYNTAX:

-- DELETE <table> 
-- WHERE <condition>
    
-- YOU NEED TO VERIFY ALL THE CONSTRAINTS (FK)


-- EXAMPLES:

CREATE TABLE T_DELETE
(
	COL1 INT NOT NULL PRIMARY KEY,
	COL2 VARCHAR(10)
)
GO

INSERT T_DELETE VALUES(1,'A')
INSERT T_DELETE VALUES(2,'B')
INSERT T_DELETE VALUES(3,'C')
INSERT T_DELETE VALUES(4,'D')
GO

SELECT * FROM T_DELETE

DELETE T_DELETE
WHERE COL1 = 1

SELECT * FROM T_DELETE

DELETE T_DELETE

-- TIP: ALWAYS ALWAYS USE THE WHERE CLAUSE TO AVOID REMOVING THE 
-- ROWS YOU DON'T WANT TO CHANGE (VERY COMMON MISTAKE)

-- A DELETE REMOVE THE ROWS AND YOU CAN'T GET THEN BACK IN A EASY WAY
-- THERE ARE RESOURCES LIKE BACKUP AND TRANSACTIONS, BUT PLAN NOT TO USE THEM

-- DELETE OCCUPY TRANSACTION LOG SPACE, SO BE VERY CAREFULL
-- AVOID AT ALL COSTS LONG DELETES, I.E. A DELETE THAT CHANGE A LOT OF ROWS AT ONCE
-- USE THE WHERE CLAUSE TO FILTER THE DATA

-- BAD SCENARIO: A DELETE THAT CHANGE A LOT OF ROWS AT ONCE
-- IT MAY BLOCK THE SERVER BECAUSE OF A TRANSACTIONS. KILL THE SESSION
-- OR EVEN STOP THE SERVER WONT HELP.

-- IF YOU WANT TO REMOVE ALL THE ROWS ON THE TABLE, YOU MAY USE THE TRUNCATE 
-- COMMAND (NEED ADMINISTRATOR PERMISSIONS)
-- TRUNCATE IS FASTER BECAUSE IT USES LESS TRANSACTION LOG

-- NEITHER TRUNCATE OR DELETE REMOVES THE TABLE (THEY JUST REMOVE THE DATA)
-- IF YOU WANT TO REMOVE THE TABLE USE DROP TABLE (AND BE EXTRA CAREFULL)

-- TRUNCATE ALSO RESET ANY IDENTITY VALUES UNLIKE DELETE. EXAMPLE:

CREATE TABLE T_IDENTITY
(
	ID		 INT	   NOT NULL IDENTITY(1,1) PRIMARY KEY 
   ,THE_DATE DATETIME  NOT NULL 
)

INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())
INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())
INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())

SELECT * 
FROM T_IDENTITY

DELETE T_IDENTITY

SELECT * 
FROM T_IDENTITY

INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())
INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())
INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())

SELECT * 
FROM T_IDENTITY

TRUNCATE TABLE T_IDENTITY

SELECT * 
FROM T_IDENTITY

INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())
INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())
INSERT T_IDENTITY(THE_DATE) VALUES(GETDATE())

SELECT * 
FROM T_IDENTITY

-- YOU CAN USE JOINS IN A DELETE. THIS ALLOW YOU TO CHECK 
-- THE DATA BEFORE REMOVING IT. YOU MAY USES ALIASES FOR TABLES

-- ONLY THE ROWS OF ONE TABLE WILL BE REMOVED

-- IT MAY BE SIMPLER TO USE THE IN() OPERADOR

-- EXAMPLE: DELETE THE CLIENT THAT DO NOT HAVE ORDERS

SELECT *
FROM CLIENTES
WHERE IDCLIENTE NOT IN (SELECT IDCLIENTE FROM PEDIDOS)

-- SELECT DISTINCT A.IDCLIENTE
SELECT *
FROM CLIENTES A LEFT JOIN PEDIDOS B
ON A.IdCLIENTE = B.IdCLIENTE
WHERE B.IdPedido IS NULL

DELETE CLIENTES
WHERE IDCLIENTE NOT IN (SELECT IDCLIENTE FROM PEDIDOS)

DELETE CLIENTES
FROM CLIENTES A LEFT JOIN PEDIDOS B
ON A.IdCLIENTE = B.IdCLIENTE
WHERE B.IdPedido IS NULL

-- THE FOREIGN KEY CONSTRAINT MAY RECEIVE THE CASCADE CLAUSE
-- TO AUTOMATICALLY DELETE ROWS. YOU REMOVE THE PARENT AND IT REMOVE THE CHILDREN
-- IT IS CALLED CASCADING REFERENTIAL INTEGRITY CONSTRAINT
-- EXAMPLE:


-- CREATES THE PARENT TABLE 
DROP TABLE PARENT
CREATE TABLE PARENT
(
  PARENT_ID  SMALLINT         NOT NULL PRIMARY KEY,
  PARENT_NAME CHAR(10)        NOT NULL,
  BIRTH_DATE  SMALLDATETIME   NOT NULL
)

-- CREATES THE CHILD TABLE
DROP TABLE CHILD
CREATE TABLE CHILD
( 
  CHILD_ID   SMALLINT        NOT NULL PRIMARY KEY,
  PARENT_ID  SMALLINT        NOT NULL ,
  CHILD_NAME CHAR(10)        NOT NULL,
  BIRTH_DATE SMALLDATETIME   NOT NULL,
  CHILD_SEX  CHAR(01)        NOT NULL
)

-- NOW CREATES THE FOREIGN KEY WITH THE CASCADE OPTION 

ALTER TABLE CHILD
ADD CONSTRAINT FK_CHILD FOREIGN KEY (PARENT_ID) REFERENCES PARENT(PARENT_ID)
    ON DELETE CASCADE


-- INSERT SOME PARENT DATA
INSERT PARENT VALUES(1,'JOAO','01/05/65')
INSERT PARENT VALUES(2,'JOSE','01/05/65')
INSERT PARENT VALUES(3,'JOAQUIM','01/05/65')
INSERT PARENT VALUES(4,'JAIRO','01/05/65')

SELECT * FROM PARENT

/* ********************** */

-- INSERT SOME CHILD DATA
INSERT CHILD VALUES (1,1,'ROSA','01/25/85','F')
INSERT CHILD VALUES (2,1,'RAQUEL','02/25/85','F')
INSERT CHILD VALUES (3,1,'RICARDO','03/25/85','M')

INSERT CHILD VALUES (4,2,'MARCOS','01/25/85','M')
INSERT CHILD VALUES (5,2,'MARIA','01/25/85','F')

-- CHECK THE DATA
SELECT * FROM PARENT
SELECT * FROM CHILD

-- THE PARENT JOAO AND ITS CHILDREN
SELECT PARENT.PARENT_ID,
	   PARENT.PARENT_NAME,
       CHILD.CHILD_ID,
       CHILD.CHILD_NAME
FROM PARENT INNER JOIN CHILD
ON PARENT.PARENT_ID = CHILD.PARENT_ID
WHERE PARENT.PARENT_ID = 1

-- REMOVING THE PARENT_ID 1 (JOAO)
-- AND CASCADING THE DELETE TO THE CRILDREN

DELETE PARENT
WHERE PARENT_ID = 1

SELECT * FROM PARENT
SELECT * FROM CHILD

SELECT PARENT.PARENT_ID,
	   PARENT.PARENT_NAME,
       CHILD.CHILD_ID,
       CHILD.CHILD_NAME
FROM PARENT INNER JOIN CHILD
ON PARENT.PARENT_ID = CHILD.PARENT_ID
